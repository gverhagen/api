## Products [/products]

### /addProduct.php [POST /addProduct.php]

Add product

+ Request (application/x-www-form-urlencoded)

    + Attributes (object)
        + name: `Johan` (string, required) - The name of the product
        + price: `12.34` (string, required) - The price of the new product
        + stock_amount: `100` (number, optional) - The new value for stock
        + external_id: `1234A` (string, optional) - External ID code
        + vat: `00` (enum[string]), optional) - The VAT tariff for the new product
            + Members
                + 00
                + 06
                + 12
                + 21
                + CM
                + EX
                + MC
                + VCMD
        + account_id: `1234` (number, optional) - The ID of the bookkeeping account
        + automerge_by_name: `true` (boolean, optional) - If this flag is set to 1, Teamleader will merge this info into an existing product with the same name, if it finds any.
            + Default: false
        + purchase_price: `12.34` (number, optional) - The purchase price of the product
        + custom_field_ID: `any` (string, optional) - Replace ID by the ID of your custom field. (eg custom_field_310)

    + Body

            name=Johan&price=12.34&external_id=1234A&vat=00&account_id=1234&automerge_by_name=1&purchase_price=12.34&custom_field_310=test



+ Response 200 (text/html)
    + Attributes (object)
        + id: `416654` (number) - ID of the product that was added

    + Body

            416654

### /updateProduct.php [POST /updateProduct.php]

Update product

+ Request (application/x-www-form-urlencoded)

    + Attributes (object)
        + product_id: `1234` (string, required) - Id of the product
        + name: `Johan` (string, optional) - The name of the product
        + price: `12.34` (string, optional) - The price of the new product
        + external_id: `1234A` (string, optional) - External ID code
        + stock_amount: `100` (number, optional) - The new value for stock
        + purchase_price: `12.34` (number, optional) - The purchase price of the product
        + custom_field_ID: `any` (string, optional) - Replace ID by the ID of your custom field. (eg custom_field_310)

    + Body

            product_id=1234&name=Johan&price=12.34&external_id=1234A&stock_amount=100&purchase_price=12.34&custom_field_310=test



+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string) - Indicating success or failure of the update operation.


### /deleteProduct.php [POST /deleteProduct.php]

Delete product

+ Request (application/x-www-form-urlencoded)

    + Attributes (object)
        + product_id: `1234` (string, required) - Id of the product

    + Body

            product_id=1234

+ Response 200 (application/json)
    + Attributes (object)
        + status: `success` (string) - Indicating success or failure of the update operation.

### /getProducts.php [POST /getProducts.php]

Search all products

+ Request (application/x-www-form-urlencoded)

    + Attributes
        + amount: 10 (number, required) - The amount of products returned per request
        + pageno: 2 (number, required) - The pag number (the first page is 0)
        + searchBy: scissor (string, optional) - The search string. Teamleader will try to match each part of the string to the name or external ID of the product
        + modifiedsince: 1498056035 (number, optional) - Unix timestamp. Teamleader will only return products that have been added or modified since that timestamp

+ Response 200 (text/html)
    
    Prices will be returned as `price_value_<index_of_price>`, they are suffixed with the price index. 
    For example, first price returned will be `price_value_1` and the second will be `price_value_2`.

    + Attributes (object)
        + id: 203052 (number)
        + external_id: ext_id_827 (string)
        + name: Nice product (string)
        + vat: 19 (string)
        + booking_account: 700 (number)
        + booking_account_id: 10 (number)
        + price_value_1: 30.0000 (number)
    
    + Body
    
            [
                {
                    "id": 203052,
                    "external_id": "EXTERNAL_11",
                    "name": "Nice product",
                    "vat": "19",
                    "booking_account": 700,
                    "booking_account_id": 10,
                    "price_value_1": "30.00000000",
                    "price_value_2": "15.00000000",
                    "price_value_3": "0.00000000",
                    ...
                }
            ]


### /getProduct.php [POST /getProduct.php]

Get product details

+ Request (application/x-www-form-urlencoded)

    + Attributes
        + product_id: 20 (number, required) - The id of the product
        + include_all_custom_fields: 1 (number, optional) - If this flag is set to 1, all custom fields will be fetched 
        + include_photos: 1 (number, optional) - If this flag is set to 1, the product image url will be fetched

+ Response 200 (text/html)

    Custom fields will be returned as on object with the custom field id as a key and the custom field value as the value.
    
    + Attributes (Product)
    
    + Body
            
            {
                "id": 202188,
                "name": "Nice product",
                "external_id": "23",
                "vat": "19",
                "inv_account_id": 1097,
                "description": "A nice product description",
                "stock": 30,
                "min_stock": 10,
                "date_edited": 1472645009,
                "prices": [
                    {
                        "name": "Price Foo",
                        "price_excl_vat": "20.0000",
                        "price_incl_vat": 23.8
                    },
                    {
                        "name": "Price BAR",
                        "price_excl_vat": "30.0000",
                        "price_incl_vat": 35.7
                    },
                ],
                "custom_fields": {
                    "1": "Custom field 1",
                    "2": 245,
                },
                "suppliers": [
                    {
                        "type":"company",
                        "id":484866,
                        "name":"Products and Services Inc.",
                        "purchase_price":"10.0000",
                        "is_main_supplier":1,
                        "supplier_product_code":"PRODUCT_CODE1"
                    }
                ]
            }
